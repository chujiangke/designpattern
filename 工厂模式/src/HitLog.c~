/*****************************************************************************/
/*                NCUP -- Shanghai Huateng Software System Inc.              */
/*****************************************************************************/
/* PROGRAM NAME: HtLog.c                                                     */
/* DESCRIPTIONS:                                                             */
/*****************************************************************************/
/*                             MODIFICATION LOG                              */
/* DATE        PROGRAMMER     DESCRIPTION                                    */
/* 2005-03-31  YU TONG        Initialize                                     */
/*****************************************************************************/
static char *Id = "@(#)$Header: /home/cvsroot/nscups/ncup/src/Common/HtLog.c,v 1.1.1.1 2010/10/14 06:39:31 cvsroot Exp $";

#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <stdarg.h>
#include <time.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/times.h>
#include <sys/stat.h>
#include <string.h>
#include <memory.h>

#include "HitLog.h"




FILE	*fp;

int	 ConvertEnv(char *str);
int ReplaceEnvVar(char *str);
void MakeDir( char * sfile );

/*****************************************************************************/
/* FUNC:   int HtLog (char *sLogName, int nLogMode, char *sFileName,         */
/*                    int nLine, char *sFmt, ...);                           */
/* INPUT:  sLogName: ÈÕÖ¾Ãû, ²»´øÂ·¾¶                                        */
/*         nLogMode: ÈÕÖ¾¼¶±ð,                                               */
/*                   HT_LOG_MODE_ERROR,HT_LOG_MODE_NORMAL,HT_LOG_MODE_DEBUG  */
/*         sFileName: ±¨´íµÄÔ´³ÌÐòÃû                                         */
/*         nLine: ±¨´íµÄÔ´³ÌÐòµÄÐÐºÅ                                         */
/*         sFmt: ³ö´íÐÅÏ¢                                                    */
/* OUTPUT: ÎÞ                                                                */
/* RETURN: 0: ³É¹¦, ÆäËü: Ê§°Ü                                               */
/* DESC:   ¸ù¾ÝLOG_MODE, ½«¸Ã¼¶±ðÖ®ÏÂµÄÈÕÖ¾¼ÇÂ¼µ½ÈÕÖ¾ÎÄ¼þÖÐ,                 */
/*****************************************************************************/
int HitLog (char *sLogName, int nLogMode, char *sFileName, int nLine, char *sFmt, ...)
{
	char	sLogTime[128];
	char	sDateTime[16];
	char	sParamLogFilePath[LOG_PATH_LEN_MAX];
	int		nParamLogMode;
	int		nParamLogSwitchMode;
	int		nParamLogSize; /* in megabytes */
	int		nReturnCode;
	long	lTimeTick;
	va_list	ap;
	time_t	lTime;
	struct tm	*tTmLocal;
	struct tms	tTMS;
	char sDateBox[10+1];




	/* get current time */
	memset (sLogTime, 0x00, sizeof(sLogTime));
	memset (sDateTime, 0x00, sizeof(sDateTime));
	lTime = time (NULL);
	tTmLocal = localtime (&lTime);
	strftime (sLogTime, sizeof(sLogTime), "%Y-%m-%d %H:%M:%S", tTmLocal);
	strftime (sDateTime, sizeof(sDateTime), "%Y%m%d%H%M%S", tTmLocal);

	
	memset( sDateBox , 0x00 , sizeof(sDateBox));
	strftime( sDateBox , sizeof(sDateBox), "/%Y%m%d", tTmLocal );
	strcat( sParamLogFilePath , sDateBox );
	//	printf("line -> %d , sParamLogFilePath -> %s \n", __LINE__, sParamLogFilePath );		
	
	/* get current time in tick */
	lTimeTick = times( &tTMS);
	
	fp = fopen (sLogName, "a+");
		
	/* save log msg in file */
	fprintf(fp, "[%s][%ld][%s][%d]", sLogTime,lTimeTick,sFileName,nLine); 

	va_start(ap, sFmt);
	vfprintf(fp, sFmt, ap);
	va_end(ap);

	fprintf(fp, "\n");
	fflush(fp);

	/* close file */
	fclose (fp);

//printf("htlog_test10\n");

	return (0);	
}


int HtLog (char *sLogName, int nLogMode, char *sFileName, int nLine, char *sFmt, ...)
{
	char	sLogTime[128];
	char	sDateTime[16];
	char	sParamLogFilePath[LOG_PATH_LEN_MAX];
	int		nParamLogMode;
	int		nParamLogSwitchMode;
	int		nParamLogSize; /* in megabytes */
	int		nReturnCode;
	long	lTimeTick;
	va_list	ap;
	time_t	lTime;
	struct tm	*tTmLocal;
	struct tms	tTMS;
	char sDateBox[10+1];




	/* get current time */
	memset (sLogTime, 0x00, sizeof(sLogTime));
	memset (sDateTime, 0x00, sizeof(sDateTime));
	lTime = time (NULL);
	tTmLocal = localtime (&lTime);
	strftime (sLogTime, sizeof(sLogTime), "%Y-%m-%d %H:%M:%S", tTmLocal);
	strftime (sDateTime, sizeof(sDateTime), "%Y%m%d%H%M%S", tTmLocal);

	
	memset( sDateBox , 0x00 , sizeof(sDateBox));
	strftime( sDateBox , sizeof(sDateBox), "/%Y%m%d", tTmLocal );
	strcat( sParamLogFilePath , sDateBox );
	//	printf("line -> %d , sParamLogFilePath -> %s \n", __LINE__, sParamLogFilePath );		
	
	/* get current time in tick */
	lTimeTick = times( &tTMS);
	
	fp = fopen (sLogName, "a+");
		
	/* save log msg in file */
	fprintf(fp, "[%s][%ld][%s][%d]", sLogTime,lTimeTick,sFileName,nLine); 

	va_start(ap, sFmt);
	vfprintf(fp, sFmt, ap);
	va_end(ap);

	fprintf(fp, "\n");
	fflush(fp);

	/* close file */
	fclose (fp);

//printf("htlog_test10\n");

	return (0);	
}

int HitLog1 (char *sLogName, char *sFmt, ...)
{
	char	sLogTime[128];
	char	sDateTime[16];
	char	sParamLogFilePath[LOG_PATH_LEN_MAX];
	int		nParamLogMode;
	int		nParamLogSwitchMode;
	int		nParamLogSize; /* in megabytes */
	int		nReturnCode;
	long	lTimeTick;
	va_list	ap;
	time_t	lTime;
	struct tm	*tTmLocal;
	struct tms	tTMS;
	char sDateBox[10+1];

	/* get config parameter, LOG_MODE, LOG_FILE_PATH, LOG_SWITCH_MODE, LOG_SIZE */
		
	memset (sParamLogFilePath, 0, sizeof (sParamLogFilePath));
	if (getenv (LOG_FILE_PATH))
		strcpy (sParamLogFilePath, (char *)getenv (LOG_FILE_PATH));
	if (strlen (sParamLogFilePath) == 0)
		strcpy (sParamLogFilePath, ".");

	/* get current time */
	memset (sLogTime, 0x00, sizeof(sLogTime));
	memset (sDateTime, 0x00, sizeof(sDateTime));
	lTime = time (NULL);
	tTmLocal = localtime (&lTime);
	strftime (sLogTime, sizeof(sLogTime), "%Y-%m-%d %H:%M:%S", tTmLocal);
	strftime (sDateTime, sizeof(sDateTime), "%Y%m%d%H%M%S", tTmLocal);

	memset( sDateBox , 0x00 , sizeof(sDateBox));
    strftime( sDateBox , sizeof(sDateBox), "/%Y%m%d", tTmLocal );
    strcat( sParamLogFilePath , sDateBox );

	/* get current time in tick */
	lTimeTick = times( &tTMS);
	
	/* open log file */
	nReturnCode = OpenLogFile (sParamLogFilePath, sLogName, 1, 10, sDateTime);
	if (nReturnCode)
		return (nReturnCode);
		
	/* save log msg in file */
	fprintf(fp, "[INFO] %s ", sLogTime); 

	va_start(ap, sFmt);
	vfprintf(fp, sFmt, ap);
	va_end(ap);

	fprintf(fp, "\n");
	fflush(fp);

	/* close file */
	fclose (fp);

//printf("htlog_test10\n");

	return (0);	
}

/*****************************************************************************/
/* FUNC:   int HtDebugString (char *sLogName, int nLogMode, char *sFileName, */
/*                            int nLine, char *psBuf, int nBufLen);          */
/* INPUT:  sLogName: ÈÕÖ¾Ãû, ²»´øÂ·¾¶                                        */
/*         nLogMode: ÈÕÖ¾¼¶±ð,                                               */
/*                   HT_LOG_MODE_ERROR,HT_LOG_MODE_NORMAL,HT_LOG_MODE_DEBUG  */
/*         sFileName: ±¨´íµÄÔ´³ÌÐòÃû                                         */
/*         nLine: ±¨´íµÄÔ´³ÌÐòµÄÐÐºÅ                                         */
/*         psBuf: ÐèÊä³öµÄbuffer                                             */
/*         nBufLen: bufferµÄ³¤¶È                                             */
/* OUTPUT: ÎÞ                                                                */
/* RETURN: 0: ³É¹¦, ÆäËü: Ê§°Ü                                               */
/* DESC:   ¸ù¾ÝLOG_MODE, ½«¸Ã¼¶±ðÖ®ÏÂµÄÈÕÖ¾¼ÇÂ¼µ½ÈÕÖ¾ÎÄ¼þÖÐ,                 */
/*         Êä³öÄÚÈÝÊÇbufferµÄ16½øÖÆÖµ                                        */
/*****************************************************************************/
int HitDebugString (char *sLogName, int nLogMode, char *sFileName, int nLine, char *psBuf, int nBufLen)
{
	register int i,j=0;
	char 	sLine[100], sTemp[6];
	char	sLogTime[128];
	char	sDateTime[16];
	char	sParamLogFilePath[LOG_PATH_LEN_MAX];
	int		nParamLogMode;
	int		nParamLogSwitchMode;
	int		nParamLogSize; /* in megabytes */
	int		nReturnCode;
	va_list	ap;
	time_t	lTime;
	struct tm	*tTmLocal;
	char sDateBox[10+1];
	
	/* get config parameter, LOG_MODE, LOG_FILE_PATH, LOG_SWITCH_MODE, LOG_SIZE */
	nParamLogMode = atoi (getenv (LOG_MODE));
	if (nParamLogMode == 0)
		nParamLogMode = HT_LOG_MODE_OFF;
	nParamLogSwitchMode = atoi (getenv (LOG_SWITCH_MODE));
	if (nParamLogSwitchMode == 0)
		nParamLogSwitchMode = LOG_SWITCH_MODE_SIZE;
	nParamLogSize = atoi (getenv (LOG_SIZE));
	if (nParamLogSize == 0)
		nParamLogSize = LOG_SIZE_DEFAULT;
	memset (sParamLogFilePath, 0, sizeof (sParamLogFilePath));
	if (getenv (LOG_FILE_PATH))
		strcpy (sParamLogFilePath, (char *)getenv (LOG_FILE_PATH));
	if (strlen (sParamLogFilePath) == 0)
		strcpy (sParamLogFilePath, ".");
	
	/* check whether the msg should be saved in log file */
	if (nParamLogMode < nLogMode)
		return 0;

	/* get current time */
	memset (sLogTime, 0x00, sizeof(sLogTime));
	memset (sDateTime, 0x00, sizeof(sDateTime));
	lTime = time (NULL);
	tTmLocal = localtime (&lTime);
	strftime (sLogTime, sizeof(sLogTime), "%Y-%m-%d %H:%M:%S", tTmLocal);
	strftime (sDateTime, sizeof(sDateTime), "%Y%m%d%H%M%S", tTmLocal);

	memset( sDateBox , 0x00 , sizeof(sDateBox));
    strftime( sDateBox , sizeof(sDateBox), "/%Y%m%d", tTmLocal );
    strcat( sParamLogFilePath , sDateBox );

	/* open log file */
	nReturnCode = OpenLogFile (sParamLogFilePath, sLogName, nParamLogSwitchMode, nParamLogSize, sDateTime);
	if (nReturnCode)
		return (nReturnCode);
		
	fprintf(fp, "[%s][%s][%d]len=%d\n", sLogTime,sFileName,nLine,nBufLen); 
	fprintf(fp, "%80.80s\n", SINGLE_LINE); 

	/* save log msg in file */
	for	(i=0; i<nBufLen; i++)
	{
		/* initialize a new line */
		if (j==0)
		{
			memset ( sLine,	' ', sizeof(sLine));
			sprintf (sTemp,	"%04d:", i );
			memcpy (sLine, sTemp, 5);
			sprintf (sTemp, ":%04d", i+15 );
			memcpy (sLine+72, sTemp, 5);
		}
		
		/* output psBuf value in hex */
		sprintf( sTemp, "%02X ", (unsigned	char)psBuf[i]);
		memcpy( &sLine[j*3+5+(j>7)], sTemp, 3);
		
		/* output psBuf in ascii */
		if ( isprint (psBuf[i]))
		{
			sLine[j+55+(j>7)]=psBuf[i];
		}
		else
		{
			sLine[j+55+(j>7)]='.';
		}
		j++;
		
		/* output the line to file */
		if (j==16)
		{
			sLine[77]=0;
			fprintf(fp, "%s\n", sLine);
			j=0;
		}
	}
	
	/* last line */
	if (j)
	{
		sLine[77]=0;
		fprintf(fp, "%s\n",	sLine);
	}
	fprintf(fp, "%80.80s\n", SINGLE_LINE); 

	fflush(fp);

	/* close file */
	fclose (fp);

	return (0);	
}



/*****************************************************************************/
/* FUNC:   int OpenLogFile (char *sLogFilePath, char *sLogName,              */
/*                          int nLogSwitchMode, int nLogSize,                */
/*                          char *sDate, FILE *fp)                           */
/* INPUT:  sLogFilePath: ÈÕÖ¾Â·¾¶                                            */
/*         sLogName: ÈÕÖ¾ÎÄ¼þÃû                                              */
/*         nLogSwitchMode: ÈÕÖ¾ÇÐ»»Ä£Ê½                                      */
/*                   LOG_SWITCH_MODE_SIZE, LOG_SWITCH_MODE_DATE              */
/*         nLogSize: LOG_SWITCH_MODE_SIZEÄ£Ê½ÏÂÎÄ¼þ´óÐ¡                      */
/*         sDateTime: µ±Ç°Ê±¼ä, YYYYMMDDhhmmss                               */
/* OUTPUT: fp: ´ò¿ªµÄÈÕÖ¾ÎÄ¼þµÄÖ¸Õë                                          */
/* RETURN: 0: ³É¹¦, ÆäËü: Ê§°Ü                                               */
/* DESC:   ¸ù¾ÝnLogSwitchMode, ´ò¿ªÈÕÖ¾ÎÄ¼þ                                  */
/*         LOG_SWITCH_MODE_SIZE: µ±ÎÄ¼þ´óÐ¡(M)´ïµ½nLogSize, ÇÐ»»µ½ÐÂÎÄ¼þ,    */
/*                               Ô­ÎÄ¼þ¸ÄÃûÎªÎÄ¼þÃûÖÐ´øÓÐÊ±¼ä                */
/*                               xx.log.YYYYMMDDhhmmss                       */
/*         LOG_SWITCH_MODE_DATE: ÈÕÖ¾ÎÄ¼þÃû´øÓÐÈÕÆÚ, xx.log.YYYYMMDD         */
/*****************************************************************************/
int OpenLogFile (char *sLogFilePath, char *sLogName, int nLogSwitchMode, int nLogSize, char *sDateTime )
{
	char		sExpFilePath[LOG_PATH_LEN_MAX];
	char		sFullLogName[LOG_PATH_LEN_MAX+LOG_NAME_LEN_MAX];
	char		sFullBakLogName[LOG_PATH_LEN_MAX+LOG_NAME_LEN_MAX];
	int			nReturnCode;
	struct stat	statbuf;
	
	memset (sFullLogName, 0x00, sizeof (sFullLogName));
	
	strcpy (sExpFilePath, sLogFilePath);
	nReturnCode = ReplaceEnvVar (sExpFilePath);

	MakeDir( sExpFilePath );

	/* set log file name */
	if (!sLogName || strlen(sLogName) == 0)
		sprintf (sFullLogName, "%s/%s", sExpFilePath, LOG_DEFAULT_NAME);
	else
		sprintf (sFullLogName, "%s/%s", sExpFilePath, sLogName);
	
	if (nLogSwitchMode == LOG_SWITCH_MODE_DATE)
	{
		/* append date in log file name */
		strncat (sFullLogName, sDateTime, 8);
	}
	else
	{
		/* this is LOG_SWITCH_MODE_SIZE */
		/* check file size */
		memset (&statbuf, 0x00, sizeof(statbuf));
		nReturnCode = stat (sFullLogName, &statbuf);
		if ( nReturnCode == 0 && statbuf.st_size >= LOG_SIZE_UNIT * nLogSize )
		{
			memset (sFullBakLogName, 0x00, sizeof(sFullBakLogName));
			sprintf (sFullBakLogName, "%s.%s", sFullLogName, sDateTime);
			rename (sFullLogName, sFullBakLogName);
//			printf("LINE -> %d , sFullLogName -> %s", __LINE__, sFullLogName );
		}
	}

	/* open log file */
//	printf("LINE -> %d , sFullLogName -> %s \n", __LINE__, sFullLogName );
	fp = fopen (sFullLogName, "a+");
	if (fp == NULL )
		return (ERR_CODE_LOG_BASE+errno);

	return 0;
}

int	 ConvertEnv(char *str)
{
char envbuf[LOG_PATH_LEN_MAX],buf[LOG_PATH_LEN_MAX];
char *ptr=NULL,*ptr1=NULL;
int  len,choice=0;
	
	memset(buf, 0, sizeof(buf));

   	ptr=(char *)strpbrk((char *)str,"./");
	if ( ptr != NULL )
	{
		choice = 1;
		memset(envbuf, 0, sizeof(envbuf));
		memcpy(envbuf, &str[1], ptr-str-1);
	}
	else
	{
		choice = 2;
		memset(envbuf, 0, sizeof(envbuf));
		strcpy(envbuf,&str[1]);
	}

	ptr1=(char *)getenv(envbuf);
	if ( ptr1 == (char *)NULL )
	{
		return -1;
	}
	else
	{
		if ( choice == 1 )
		{
			strcat(buf, ptr1);
			strcat(buf, ptr);
		}
		else if ( choice == 2 )
			strcat(buf, ptr1);
	}

	len=strlen(buf);

	memset(str, 0, sizeof(str));
	strcpy(str, buf);

	return 0;
}

/*****************************************************************************/
/* FUNC:   int ReplaceEnvVar(char *str)                                      */
/* INPUT:  str: ×Ö·û´®, ¿ÉÄÜ°üº¬»·¾³±äÁ¿                                     */
/*              Èç: $(HOME)/src/$TERM                                        */
/* OUTPUT: str: ×Ö·û´®, »·¾³±äÁ¿ÒÑ¾­ÓÃ¶ÔÓ¦µÄÖµÌæ»»                           */
/* RETURN: 0: ³É¹¦, ÆäËü: Ê§°Ü                                               */
/* DESC:   ¶ÔÊäÈëµÄ×Ö·û´®, ½«ÆäÖÐµÄ»·¾³±äÁ¿ÓÃ¶ÔÓ¦µÄÖµÌæ»»                    */
/*         Èç: $(HOME)/src/$TERM, ÆäÖÐµÄ$(HOME)ºÍ$TERM»á±»Ìæ»»               */
/*         µ÷ÓÃÊ±Ðë±£Ö¤str¶ÔÓ¦µÄbuffer×ã¹»´ó, ²»»áÒòÌæ»»Ôì³ÉÔ½½ç             */
/*****************************************************************************/
int ReplaceEnvVar(char *str)
{
char *ptr=NULL;
char buf[LOG_PATH_LEN_MAX], field[LOG_PATH_LEN_MAX];
int	 len=0,nRet,flag;
int  count=1,i,j;

	/********************************************************************/
	/* 		delete 	characters ' ','(',')','\t' from string "str"		*/
	/********************************************************************/
    len=strlen(str);
    memset(buf,0,sizeof(buf));

    for(i=0,j=0;i<len;i++)
    if ( str[i] != ' ' && str[i] != '\t' && str[i] != '(' && str[i] != ')' )
        buf[j++]=str[i];

    memset(str,0, len);
    strcpy(str,buf);

	/********************************************************/
	/* 		distinguish if first character is '$' or not	*/
	/********************************************************/
	if ( str[0] == '$' )
		flag = 1;
	else
		flag = 2;

	memset(buf, 0, sizeof(buf));
	if ( flag == 1 )
	{
	   	ptr=(char *)strtok((char *)str,"$");
   		while ( ptr != NULL )
		{
			memset(field, 0, sizeof(field));
			sprintf(field,"%c%s",'$',ptr);
			nRet = ConvertEnv(field);
			if ( nRet != 0 )
				return -1;
	
			strcat(buf, field);

			ptr=(char *)strtok((char *)NULL,"$");
		}
	}
	else if ( flag == 2 )
	{
	   	ptr=(char *)strtok((char *)str,"$");
   		while ( ptr != NULL )
		{
			count++;
			if ( count != 2)
			{
				memset(field, 0, sizeof(field));
				sprintf(field,"%c%s",'$',ptr);
				nRet = ConvertEnv(field);
				if ( nRet != 0 )
					return -1;
			}
			else
			{
				memset(field, 0, sizeof(field));
				sprintf(field,"%s",ptr);
			}

			strcat(buf, field);

			ptr=(char *)strtok((char *)NULL,"$");
		}
	}

	len = strlen(buf);
	memcpy(str, buf, len+1);

	return 0;
}

/* add by yu0 20060613 */
int HitLogNoDate (char *sLogName, char *sFmt, ...)
{
	char	sLogTime[128];
	char	sDateTime[16];
	char	sParamLogFilePath[LOG_PATH_LEN_MAX];
	int		nParamLogMode;
	int		nParamLogSwitchMode;
	int		nParamLogSize; /* in megabytes */
	int		nReturnCode;
	long	lTimeTick;
	va_list	ap;
	time_t	lTime;
	struct tm	*tTmLocal;
	struct tms	tTMS;
	char sDateBox[10+1];
	
	/* get config parameter, LOG_MODE, LOG_FILE_PATH, LOG_SWITCH_MODE, LOG_SIZE */
	nParamLogMode = atoi (getenv (LOG_MODE));
	if (nParamLogMode == 0)
		nParamLogMode = HT_LOG_MODE_OFF;
	nParamLogSwitchMode = atoi (getenv (LOG_SWITCH_MODE));
	if (nParamLogSwitchMode == 0)
		nParamLogSwitchMode = LOG_SWITCH_MODE_SIZE;
	nParamLogSize = atoi (getenv (LOG_SIZE));
	if (nParamLogSize == 0)
		nParamLogSize = LOG_SIZE_DEFAULT;
	memset (sParamLogFilePath, 0, sizeof (sParamLogFilePath));
	if (getenv (LOG_FILE_PATH))
		strcpy (sParamLogFilePath, (char *)getenv (LOG_FILE_PATH));
	if (strlen (sParamLogFilePath) == 0)
		strcpy (sParamLogFilePath, ".");
	
	/* get current time */
	memset (sLogTime, 0x00, sizeof(sLogTime));
	memset (sDateTime, 0x00, sizeof(sDateTime));
	lTime = time (NULL);
	tTmLocal = localtime (&lTime);
	strftime (sLogTime, sizeof(sLogTime), "%Y-%m-%d %H:%M:%S", tTmLocal);
	strftime (sDateTime, sizeof(sDateTime), "%Y%m%d", tTmLocal);

	memset( sDateBox , 0x00 , sizeof(sDateBox));
    strftime( sDateBox , sizeof(sDateBox), "/%Y%m%d", tTmLocal );
    strcat( sParamLogFilePath , sDateBox );

	/* get current time in tick */
	lTimeTick = times( &tTMS);
	
	/* open log file */
	nReturnCode = OpenLogFile (sParamLogFilePath, sLogName, nParamLogSwitchMode, nParamLogSize, sDateTime);
	if (nReturnCode)
		return (nReturnCode);
		
	/* save log msg in file */
	va_start(ap, sFmt);
	vfprintf(fp, sFmt, ap);
	va_end(ap);

	fflush(fp);

	/* close file */
	fclose (fp);

	return (0);	
}

void MakeDir( char * sfile )
{
      struct stat sb;

	memset(&sb , 0x00 , sizeof(sb));

    if( stat( sfile , &sb) < 0 )
    {
        mkdir( sfile , 0777 );
		return ;
    }
    if(!S_ISDIR(sb.st_mode))
    {
        mkdir( sfile , 0777 );
    }
    return ;
}

